//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package hu.todo.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import hu.todo.R.layout;
import hu.todo.rest.MyErrorHandler_;
import hu.todo.rest.RestInterface_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import org.springframework.util.MultiValueMap;

public final class AddTaskActivity_
    extends AddTaskActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_add_task);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        taskManager = new RestInterface_();
        myErrorHandler = MyErrorHandler_.getInstance_(this);
        restoreSavedInstanceState_(savedInstanceState);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static AddTaskActivity_.IntentBuilder_ intent(Context context) {
        return new AddTaskActivity_.IntentBuilder_(context);
    }

    public static AddTaskActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new AddTaskActivity_.IntentBuilder_(fragment);
    }

    public static AddTaskActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new AddTaskActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        title = ((EditText) hasViews.findViewById(hu.todo.R.id.title));
        createdPicker = ((EditText) hasViews.findViewById(hu.todo.R.id.createdPicker));
        description = ((EditText) hasViews.findViewById(hu.todo.R.id.description));
        date = ((TextView) hasViews.findViewById(hu.todo.R.id.date));
        user = ((AutoCompleteTextView) hasViews.findViewById(hu.todo.R.id.user));
        datePicker = ((EditText) hasViews.findViewById(hu.todo.R.id.datePicker));
        created = ((TextView) hasViews.findViewById(hu.todo.R.id.created));
        timePicker = ((EditText) hasViews.findViewById(hu.todo.R.id.timePicker));
        updatedPicker = ((EditText) hasViews.findViewById(hu.todo.R.id.updatedPicker));
        updated = ((TextView) hasViews.findViewById(hu.todo.R.id.updated));
        btnCreate = ((Button) hasViews.findViewById(hu.todo.R.id.btnCreate));
        {
            View view = hasViews.findViewById(hu.todo.R.id.btnCreate);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        AddTaskActivity_.this.clickCreate();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(hu.todo.R.id.datePicker);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        AddTaskActivity_.this.showDatePicker();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(hu.todo.R.id.timePicker);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        AddTaskActivity_.this.showTimePicker();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(hu.todo.R.id.createdPicker));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        AddTaskActivity_.this.createdPChanged();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(hu.todo.R.id.updatedPicker));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        AddTaskActivity_.this.updatedPChanged();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(hu.todo.R.id.description));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        AddTaskActivity_.this.descChanged();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(hu.todo.R.id.title));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        AddTaskActivity_.this.updatedTChanged();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(hu.todo.R.id.datePicker));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        AddTaskActivity_.this.datePChanged();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(hu.todo.R.id.timePicker));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        AddTaskActivity_.this.timePChanged();
                    }

                }
                );
            }
        }
        setViews();
        afterViews();
    }

    @Override
    public void insertTask(final SQLiteDatabase db) {
        db.beginTransaction();
        try {
            AddTaskActivity_.super.insertTask(db);
            db.setTransactionSuccessful();
            return ;
        } catch (RuntimeException e) {
            Log.e("AddTaskActivity_", "Error in transaction", e);
            throw e;
        } finally {
            db.endTransaction();
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        boolean handled = super.onOptionsItemSelected(item);
        if (handled) {
            return true;
        }
        int itemId_ = item.getItemId();
        if (itemId_ == android.R.id.home) {
            navigateBackOnHomePress();
            return true;
        }
        return false;
    }

    @Override
    public void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        bundle.putString("desc", desc);
        bundle.putString("updatedP", updatedP);
        bundle.putString("t", t);
        bundle.putString("dateT", dateT);
        bundle.putString("createdP", createdP);
        bundle.putString("dateP", dateP);
    }

    private void restoreSavedInstanceState_(Bundle savedInstanceState) {
        if (savedInstanceState == null) {
            return ;
        }
        desc = savedInstanceState.getString("desc");
        updatedP = savedInstanceState.getString("updatedP");
        t = savedInstanceState.getString("t");
        dateT = savedInstanceState.getString("dateT");
        createdP = savedInstanceState.getString("createdP");
        dateP = savedInstanceState.getString("dateP");
    }

    @Override
    public void showDialog() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                AddTaskActivity_.super.showDialog();
            }

        }
        );
    }

    @Override
    public void dismissDialog() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                AddTaskActivity_.super.dismissDialog();
            }

        }
        );
    }

    @Override
    public void setAuCompleteUser() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                AddTaskActivity_.super.setAuCompleteUser();
            }

        }
        );
    }

    @Override
    public void addTask(final MultiValueMap<String, String> formFields, final String token) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    AddTaskActivity_.super.addTask(formFields, token);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void getUsers(final String token) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    AddTaskActivity_.super.getUsers(token);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, AddTaskActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, AddTaskActivity_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, AddTaskActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public AddTaskActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

    }

}
